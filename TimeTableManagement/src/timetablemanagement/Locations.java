/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timetablemanagement;

import DataBase.DBConnector;
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class Locations extends javax.swing.JFrame {

    java.sql.Connection conn = DBConnector.getConnection();
    int rrId = 0;

    /**
     * Creates new form Locations
     */
    public Locations() {
        initComponents();
        setLocationRelativeTo(null);
        updateRRTable();
        updateNATable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rrTime = new javax.swing.JComboBox<>();
        reservedroomssave = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        rrUpdate = new javax.swing.JButton();
        rrDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rrTable = new javax.swing.JTable();
        rrDelete = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        rrRoom = new javax.swing.JComboBox<>();
        rrReset = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        naT = new javax.swing.JPanel();
        naUpdate = new javax.swing.JButton();
        naTime = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        naSID = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        naTable = new javax.swing.JTable();
        naDelete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        naGroup = new javax.swing.JComboBox<>();
        naReset = new javax.swing.JButton();
        naID = new javax.swing.JLabel();
        naSubgroup = new javax.swing.JComboBox<>();
        naSave = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Room");

        rrTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8.30", "9.30", "10.30", "11.30", "12.30", "13.30", "14.30", "15.30", "16.30", "17.30", "18.30", "19.30", " ", " " }));
        rrTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrTimeActionPerformed(evt);
            }
        });

        reservedroomssave.setBackground(new java.awt.Color(51, 153, 0));
        reservedroomssave.setForeground(new java.awt.Color(255, 255, 255));
        reservedroomssave.setText("Save");
        reservedroomssave.setContentAreaFilled(false);
        reservedroomssave.setOpaque(true);
        reservedroomssave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservedroomssaveActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 102, 255));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Back To Dashboard");
        jButton4.setContentAreaFilled(false);
        jButton4.setOpaque(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        rrUpdate.setBackground(new java.awt.Color(51, 51, 255));
        rrUpdate.setForeground(new java.awt.Color(255, 255, 255));
        rrUpdate.setText("Update");
        rrUpdate.setContentAreaFilled(false);
        rrUpdate.setOpaque(true);
        rrUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrUpdateActionPerformed(evt);
            }
        });

        rrDate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rrDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrDateActionPerformed(evt);
            }
        });

        jLabel1.setText("Date");

        rrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Room", "Date", "Time "
            }
        ));
        rrTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rrTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(rrTable);

        rrDelete.setBackground(new java.awt.Color(255, 0, 0));
        rrDelete.setForeground(new java.awt.Color(255, 255, 255));
        rrDelete.setText("Delete");
        rrDelete.setContentAreaFilled(false);
        rrDelete.setOpaque(true);
        rrDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrDeleteActionPerformed(evt);
            }
        });

        jLabel5.setText("Time");

        rrRoom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A506", "A507", "B504", "B405", "A305", "N3A", "N3B", "N3C", " " }));
        rrRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrRoomActionPerformed(evt);
            }
        });

        rrReset.setBackground(new java.awt.Color(255, 102, 102));
        rrReset.setForeground(new java.awt.Color(255, 255, 255));
        rrReset.setText("Reset");
        rrReset.setContentAreaFilled(false);
        rrReset.setOpaque(true);
        rrReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rrResetActionPerformed(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Reserved Rooms");
        jLabel7.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(113, 113, 113)
                                        .addComponent(rrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(rrDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel1))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rrTime, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rrRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(rrDate, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(reservedroomssave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(rrReset, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(188, 188, 188))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel7)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservedroomssave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rrDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rrReset, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("Reserved Rooms", jPanel1);

        naUpdate.setBackground(new java.awt.Color(51, 51, 255));
        naUpdate.setForeground(new java.awt.Color(255, 255, 255));
        naUpdate.setText("Update");
        naUpdate.setContentAreaFilled(false);
        naUpdate.setOpaque(true);
        naUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naUpdateActionPerformed(evt);
            }
        });

        naTime.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        naTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naTimeActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Not Available Times Of Students");
        jLabel8.setOpaque(true);

        naSID.setText("Student Sub Group ID");

        naTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Group", "Sub Group", "Time "
            }
        ));
        naTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                naTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(naTable);

        naDelete.setBackground(new java.awt.Color(255, 0, 0));
        naDelete.setForeground(new java.awt.Color(255, 255, 255));
        naDelete.setText("Delete");
        naDelete.setContentAreaFilled(false);
        naDelete.setOpaque(true);
        naDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Time");

        naGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Y1.S1", "Y1.S2", "Y2.S1", "Y2.S2", "Y3.S1", "Y3.S2", "Y4.S1", "Y4.S2" }));
        naGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naGroupActionPerformed(evt);
            }
        });

        naReset.setBackground(new java.awt.Color(255, 102, 102));
        naReset.setForeground(new java.awt.Color(255, 255, 255));
        naReset.setText("Reset");
        naReset.setContentAreaFilled(false);
        naReset.setOpaque(true);
        naReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naResetActionPerformed(evt);
            }
        });

        naID.setText("Student Group ID");

        naSubgroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.1", "1.2", "2.1", "2.2", "3.1", "3.2", "4.1", "4.2", "5.1", "5.2", "6.1", "6.2", "7.1", "7.2", "8.1", "8.2", "9.1", "9.2" }));
        naSubgroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naSubgroupActionPerformed(evt);
            }
        });

        naSave.setBackground(new java.awt.Color(51, 153, 0));
        naSave.setForeground(new java.awt.Color(255, 255, 255));
        naSave.setText("Save");
        naSave.setContentAreaFilled(false);
        naSave.setOpaque(true);
        naSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naSaveActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 102, 255));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Back To Dashboard");
        jButton3.setContentAreaFilled(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout naTLayout = new javax.swing.GroupLayout(naT);
        naT.setLayout(naTLayout);
        naTLayout.setHorizontalGroup(
            naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, naTLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(188, 188, 188))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, naTLayout.createSequentialGroup()
                .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(naTLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(naTLayout.createSequentialGroup()
                                    .addGap(113, 113, 113)
                                    .addComponent(naUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(naDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(naTLayout.createSequentialGroup()
                                    .addComponent(naID)
                                    .addGap(27, 27, 27)
                                    .addComponent(naGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(naTLayout.createSequentialGroup()
                                    .addComponent(naSID)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(naSubgroup, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(naTLayout.createSequentialGroup()
                                .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(naSave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41)
                                .addComponent(naTime, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(naTLayout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(naReset, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 158, Short.MAX_VALUE))
            .addGroup(naTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        naTLayout.setVerticalGroup(
            naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(naTLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel8)
                .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(naTLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(naID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(naGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(naSID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(naSubgroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(naTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(naTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(naSave, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(naUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(naDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addComponent(naReset, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE))
                    .addGroup(naTLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        jTabbedPane1.addTab("Not Available Times", naT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 849, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void rrResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrResetActionPerformed
        rrRoom.setSelectedIndex(0);
        rrDate.setText("");
        rrTime.setSelectedIndex(0);
    }//GEN-LAST:event_rrResetActionPerformed

    private void rrRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrRoomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rrRoomActionPerformed

    private void rrDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrDeleteActionPerformed
        DefaultTableModel dft = (DefaultTableModel) rrTable.getModel();
        int row = rrTable.getSelectedRow();
        int id = Integer.parseInt(dft.getValueAt(row, 0).toString());
        System.out.println("id : " + id);
        try {
            var delete = conn.prepareStatement("delete from reservedrooms where id=?");
            delete.setInt(1, id);
            delete.execute();
            JOptionPane.showMessageDialog(this, "Successfully Deleted");
            updateRRTable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rrDeleteActionPerformed

    private void rrTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rrTableMouseClicked
        DefaultTableModel dft = (DefaultTableModel) rrTable.getModel();
        int row = rrTable.getSelectedRow();
        rrId = Integer.parseInt(dft.getValueAt(row, 0).toString());
        rrRoom.setSelectedItem(dft.getValueAt(row, 1).toString());
        rrDate.setText(dft.getValueAt(row, 2).toString());
        rrTime.setSelectedItem(dft.getValueAt(row, 3).toString());
    }//GEN-LAST:event_rrTableMouseClicked

    private void rrDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rrDateActionPerformed

    private void rrUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrUpdateActionPerformed

        String roomValue = rrRoom.getItemAt(rrRoom.getSelectedIndex());
        String dateValue = rrDate.getText();
        String timeValue = rrTime.getItemAt(rrTime.getSelectedIndex());

        System.out.println("DB connected. updating " + roomValue + ", " + dateValue + ", " + timeValue);

        try {
            var update = conn.prepareStatement("update reservedrooms set room=?,date=?,time=? where id=? ");
            update.setString(1, roomValue);
            update.setString(2, dateValue);
            update.setString(3, timeValue);
            update.setString(4, String.valueOf(rrId));
            update.executeUpdate();
            JOptionPane.showMessageDialog(this, "Successfully Updated");
            updateRRTable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rrUpdateActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        dispose();
        MainDashboard md = new MainDashboard();
        md.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void reservedroomssaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservedroomssaveActionPerformed
        String roomValue = rrRoom.getItemAt(rrRoom.getSelectedIndex());
        String dateValue = rrDate.getText();
        String timeValue = rrTime.getItemAt(rrTime.getSelectedIndex());

        System.out.println("DB connected. saving " + roomValue + ", " + dateValue + ", " + timeValue);

        try {
            var save = conn.prepareStatement("insert into reservedrooms(room,date,time)values(?,?,?)");
            save.setString(1, roomValue);
            save.setString(2, dateValue);
            save.setString(3, timeValue);
            save.executeUpdate();
            JOptionPane.showMessageDialog(this, "Successfully Added");
            updateRRTable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_reservedroomssaveActionPerformed

    private void rrTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rrTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rrTimeActionPerformed

    private void naUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naUpdateActionPerformed
        
        DefaultTableModel dft = (DefaultTableModel) naTable.getModel();
        int selectedIndex = naTable.getSelectedRow();
        int id = Integer.parseInt(dft.getValueAt(selectedIndex, 0).toString());
       
        String groupValue = naGroup.getItemAt(naGroup.getSelectedIndex());
        String subGroupValue = naSubgroup.getItemAt(naSubgroup.getSelectedIndex());
        String timeValue = naTime.getText();

        System.out.println("DB connected. updating " + groupValue + ", " + subGroupValue + ", " + timeValue);

        try {
            var update = conn.prepareStatement("update notavailablestudents set stuGroup=?,subGroup=?,time=? where id=? ");
            update.setString(1, groupValue);
            update.setString(2, subGroupValue);
            update.setString(3, timeValue);
            update.setInt(4, id);
            update.executeUpdate();
            JOptionPane.showMessageDialog(this, "Successfully Updated");
            updateNATable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_naUpdateActionPerformed

    private void naTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naTimeActionPerformed

    private void naTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_naTableMouseClicked
        DefaultTableModel dft = (DefaultTableModel) naTable.getModel();
        int row = naTable.getSelectedRow();
        int naId = Integer.parseInt(dft.getValueAt(row, 0).toString());
        naGroup.setSelectedItem(dft.getValueAt(row, 1).toString());
        naSubgroup.setSelectedItem(dft.getValueAt(row, 2).toString());
        naTime.setText(dft.getValueAt(row, 3).toString());
        

    }//GEN-LAST:event_naTableMouseClicked

    private void naDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naDeleteActionPerformed
        DefaultTableModel dft = (DefaultTableModel) naTable.getModel();
        int row = naTable.getSelectedRow();
        int id = Integer.parseInt(dft.getValueAt(row, 0).toString());
        System.out.println("id : " + id);
        try {
            var delete = conn.prepareStatement("delete from notavailablestudents where id=?");
            delete.setInt(1, id);
            delete.execute();
            JOptionPane.showMessageDialog(this, "Successfully Deleted");
            updateNATable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_naDeleteActionPerformed

    private void NATableMouseClicked(java.awt.event.MouseEvent evt) {                                     
        DefaultTableModel dft = (DefaultTableModel) naTable.getModel();
        int row = naTable.getSelectedRow();
        int naId = Integer.parseInt(dft.getValueAt(row, 0).toString());
        naGroup.setSelectedItem(dft.getValueAt(row, 1).toString());
        naSubgroup.setSelectedItem(dft.getValueAt(row, 2).toString());
        naTime.setText(dft.getValueAt(row, 3).toString());
        
    }
    
    private void naGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naGroupActionPerformed

    private void naResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naResetActionPerformed
        naGroup.setSelectedIndex(0);
        naSubgroup.setSelectedIndex(0);
        naTime.setText("");
        
    }//GEN-LAST:event_naResetActionPerformed

    private void naSubgroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naSubgroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naSubgroupActionPerformed

    private void naSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naSaveActionPerformed
        String groupValue = naGroup.getItemAt(naGroup.getSelectedIndex());
        String subGroupValue = naSubgroup.getItemAt(naSubgroup.getSelectedIndex());
        String timeValue = naTime.getText();
        

        System.out.println("DB connected. saving " + groupValue + ", " + subGroupValue + ", " + timeValue);

        try {
            var save = conn.prepareStatement("insert into notavailablestudents(stuGroup,subGroup,time)values(?,?,?)");
            save.setString(1, groupValue);
            save.setString(2, subGroupValue);
            save.setString(3, timeValue);
            save.executeUpdate();
            JOptionPane.showMessageDialog(this, "Successfully Added");
            updateNATable();
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_naSaveActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
        MainDashboard md = new MainDashboard();
        md.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Locations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Locations().setVisible(true);
            }
        });
    }

    private void updateRRTable() {
        try {
            java.sql.PreparedStatement read = conn.prepareStatement("select * from reservedrooms");
            ResultSet rs = read.executeQuery();
            ResultSetMetaData Rss = rs.getMetaData();
            var c = Rss.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) rrTable.getModel();
            dft.setRowCount(0);
            while (rs.next()) {
                Vector v1 = new Vector();
                for (int q = 1; q <= c; q++) {
                    v1.add(rs.getString("id"));
                    v1.add(rs.getString("room"));
                    v1.add(rs.getString("date"));
                    v1.add(rs.getString("time"));
                }
                dft.addRow(v1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateNATable() {
        try {
            java.sql.PreparedStatement read = conn.prepareStatement("select * from notavailablestudents");
            ResultSet rs = read.executeQuery();
            ResultSetMetaData Rss = rs.getMetaData();
            var c = Rss.getColumnCount();
            DefaultTableModel dft = (DefaultTableModel) naTable.getModel();
            dft.setRowCount(0);
            while (rs.next()) {
                Vector v1 = new Vector();
                for (int q = 1; q <= c; q++) {
                    v1.add(rs.getString("ID"));
                    v1.add(rs.getString("stuGroup"));
                    v1.add(rs.getString("subGroup"));
                    v1.add(rs.getString("time"));
                }
                dft.addRow(v1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(studentgroups.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton naDelete;
    private javax.swing.JComboBox<String> naGroup;
    private javax.swing.JLabel naID;
    private javax.swing.JButton naReset;
    private javax.swing.JLabel naSID;
    private javax.swing.JButton naSave;
    private javax.swing.JComboBox<String> naSubgroup;
    private javax.swing.JPanel naT;
    private javax.swing.JTable naTable;
    private javax.swing.JTextField naTime;
    private javax.swing.JButton naUpdate;
    private javax.swing.JButton reservedroomssave;
    private javax.swing.JTextField rrDate;
    private javax.swing.JButton rrDelete;
    private javax.swing.JButton rrReset;
    private javax.swing.JComboBox<String> rrRoom;
    private javax.swing.JTable rrTable;
    private javax.swing.JComboBox<String> rrTime;
    private javax.swing.JButton rrUpdate;
    // End of variables declaration//GEN-END:variables
}
